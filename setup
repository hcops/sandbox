#!/usr/bin/env bash

# Exit on error
set -e

# store the traget platform in a variable
PLTFRM=$1
SOURCEDIR=$HOME/sandbox

# Function to strip surrounding quotes from a string
strip_quotes() {
  echo "$1" | sed -e 's/^"//' -e 's/"$//' -e "s/^'//" -e "s/'$//"
}

# Function to output the used credentials
output_credentials() {
  echo -e "Home manager is now active, using the following configuration:\nLinux user: ${USER}\nGitHub user: ${NME}\nGitHub eMail: ${EML}"
}

# Function to configure the nix environment
config_nix() {
  # activating experimental features
  echo "experimental-features = nix-command flakes\ntrusted-users = root ${USER}" | sudo tee -a /etc/nix/nix.conf
  
  # add the home-manager package channel
  nix-channel --add https://github.com/nix-community/home-manager/archive/master.tar.gz home-manager
  
  # updte the home manager channel
  nix-channel --update
} 

# Function to set the user information in the nix config files
user_settings() {
  sed -i "s/_USRNAME_/${USER}/g" $SOURCEDIR/home.nix 
  sed -i "s/_GHBNAME_/${NME}/g" $SOURCEDIR/home.nix
  sed -i "s/_GHBMAIL_/${EML}/g" $SOURCEDIR/home.nix 
  sed -i "s/_SYSTEM_/${PLTFRM}/g" $SOURCEDIR/flake.nix
}

# Function to install home-manager
install_home_manager() {
  # create the first home-manager generation
  nix-shell '<home-manager>' -A install

  # add the nix path to `.bashrc`
  echo '. "$HOME/.nix-profile/etc/profile.d/hm-session-vars.sh"' >> $HOME/.profile
}

clone_repo() {
  # clone the default home-manager configuration
  nix-shell -p gh --run "mkdir $HOME/temp/
    gh auth login -h github.com -s user && \
    gh api user > $HOME/temp/ghusr.json && \
    gh api user/emails > $HOME/temp/ghml.json && \
    gh repo clone hcops/sandbox"

  # retrieve and cache user identifier
  NME=$(nix-shell -p jq --run "jq -r '.login' ${HOME}/temp/ghusr.json")
  local EML=$(nix-shell -p jq --run "jq '.[] | select(.primary == true) | .email' ${HOME}/temp/ghml.json")
  EML=$(strip_quotes $EML)
}

# Define a function named "main"
main() {
  clone_repo
  config_nix
  install_home_manager
  user_settings

  # cd $SOURCEDIR/ && git add . && git commit -m "update configuration files"
  cd $SOURCEDIR/ && home-manager switch -b backup --flake .#$USER

  # create symbolic links to the configuration files
  for config_file in home.nix flake.nix; do
    config_path="${HOME}/.config/home-manager/$config_file"
    if [ -f "$config_path" ]; then
      echo "'$config_file' already exists, replacing..."
      rm "$config_path"
    else
      echo "${config_file} does not exist, creating ..."
    fi
    ln -s "${SOURCEDIR}/$config_file" "${HOME}/.config/home-manager/$config_file"; 
  done

  # clean temp configration files
  rm -rf $HOME/temp

  # activate direnv
  echo 'eval "$(direnv hook bash)"' >> $HOME/.bashrc
  # change to the following lines when the the use of nix-direnv is intended, and the original .bashrc will be replaced with a symbolic link
  # echo 'eval "$(direnv hook bash)"' | sudo tee -a $(readlink "$HOME/.bashrc")

  # restart nix daemon and return the used credentials
  sudo systemctl restart nix-daemon
  output_credentials
}

# Call the "main" function with all the command-line arguments
main "$@"
